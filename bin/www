#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const https = require('https');
const forge = require('node-forge');
const readline = require('readline');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '4938'); // Changed default port to '4938'

/**
 * Get process arguments
 */
const appArgs = process.argv.slice(2);
const argv = require('minimist')(appArgs);

const httpUser = argv.user || "";
const httpPassword = argv.password || "";
var controlFileHandler = argv.controlfh;

app.set('port', port);
app.set('httpUser', httpUser);
app.set('httpPassword', httpPassword);

/**
 * Create HTTP(s) server.
 * HTTP server is created if auth is disabled
 * HTTPs server is created if auth is enabled
 */

var server;

if (httpUser !== undefined && httpPassword !== undefined && httpUser.length > 0 && httpPassword.length > 0) {
  const pki = forge.pki;
  const rsa = forge.pki.rsa;
  const keys = rsa.generateKeyPair(2048);
  const certificate = createCertificate(keys, port);

  server = https.createServer({
    key: pki.privateKeyToPem(keys.privateKey),
    cert: pki.certificateToPem(certificate),
  }, app);
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

var serverListening = false;

if (controlFileHandler) {
  // Accept control messages coming from a file descriptor.
  controlFileHandler = parseInt(controlFileHandler);
  let rlControl = readline.createInterface(fs.createReadStream('', {
    fd: controlFileHandler
  }));
  rlControl.on('line', (line) => {
    line = line.toString();

    const isStop = line.match(/^STOP/);
    const isStart = line.match(/^START/);

    if (isStop) {
      if (!serverListening) {
        console.error("Node.js already stopped...");
      } else {
        console.error("Node.js Suspending...");

        serverListening = false;
        server.close();

        console.error("Node.js Suspended.");
      }
    } else if (isStart) {
      if (serverListening) {
        console.error("Node.js already started...");
      } else {
        console.error("Node.js Resuming...");

        serverListening = true
        server.listen(port);

        console.error("Node.js Resumed.");
      }
    } else {
      console.error(`unknown control command: #${line}#`);
    }
  });
} else {
  var serverListening = true;
  server.listen(port);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

function createCertificate(keys, port) {
  const pki = forge.pki;
  // generate a keypair and create an X.509v3 certificate
  const cert = pki.createCertificate();
  cert.publicKey = keys.publicKey;

  cert.serialNumber = '01';
  cert.validity.notBefore = new Date();
  cert.validity.notAfter = new Date();
  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);
  const attrs = [{
    name: 'commonName',
    value: 'localhost'
  }, {
    name: 'countryName',
    value: 'AR'
  }, {
    shortName: 'ST',
    value: 'Rio Negro'
  }, {
    name: 'localityName',
    value: 'San Carlos de Bariloche'
  }, {
    name: 'organizationName',
    value: 'Terra Planet'
  }, {
    shortName: 'OU',
    value: 'Terra Planet'
  }];
  cert.setSubject(attrs);
  // alternatively set subject from a csr
  //cert.setSubject(csr.subject.attributes);
  cert.setIssuer(attrs);

  cert.setExtensions([{
    name: 'authorityKeyIdentifier',
    keyIdentifier: true,
    authorityCertIssuer: true,
    serialNumber: true
  },
  {
    name: 'basicConstraints',
    cA: true
  }, {
    name: 'keyUsage',
    keyCertSign: true,
    digitalSignature: true,
    nonRepudiation: true,
    keyEncipherment: true,
    dataEncipherment: true,
    keyAgreement: true,
  }, {
    name: 'extKeyUsage',
    serverAuth: true,
    clientAuth: true,
    codeSigning: true,
    emailProtection: true,
    timeStamping: true
  }, {
    name: 'nsCertType',
    client: false,
    server: true,
    email: true,
    objsign: true,
    sslCA: true,
    emailCA: true,
    objCA: true
  }, {
    name: 'subjectAltName',
    altNames: [{
      type: 6, // URI
      value: 'localhost:' + port + '/'
    }, {
      type: 7, // IP
      ip: '127.0.0.1'
    }]
  }, {
    name: 'subjectKeyIdentifier'
  }]);
  // self-sign certificate
  cert.sign(keys.privateKey);
  return cert;
}
